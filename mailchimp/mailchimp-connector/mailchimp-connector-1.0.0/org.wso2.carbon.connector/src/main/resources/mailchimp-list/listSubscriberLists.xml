<?xml version="1.0" encoding="UTF-8"?>
<!--
   Copyright (c) 2005-2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.

   WSO2 Inc. licenses this file to you under the Apache License,
   Version 2.0 (the "License"); you may not use this file except
   in compliance with the License.
   You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing,
   software distributed under the License is distributed on an
   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   KIND, either express or implied. See the License for the
   specific language governing permissions and limitations
   under the License.
-->
<template name="listSubscriberLists" xmlns="http://ws.apache.org/ns/synapse">
   <parameter name="listId"
      description="Return a single list using a known list_id. Accepts multiples separated by commas when not using exact matching." />
   <parameter name="listName" description="Only lists that match this name." />
   <parameter name="fromName" description="Only lists that have a default from name matching this." />
   <parameter name="fromEmail" description="Only lists that have a default from email matching this." />
   <parameter name="fromSubject" description="Only lists that have a default from email matching this." />
   <parameter name="createdBefore" description="Only show lists that were created before this date+time." />
   <parameter name="createdAfter" description="Only show lists that were created since this date+time." />
   <parameter name="exact"
      description="Flag for whether to filter on exact values when filtering, or search within content for filter values - defaults to false." />
   <parameter name="start"
      description="Control paging of lists, start results at this list #, defaults to 1st page of data (page 0)." />
   <parameter name="limit"
      description="Control paging of lists, number of lists to return with each call, defaults to 25 (max=100)." />
   <parameter name="sortField"
      description="Created (the created date, default) or web (the display order in the web app). Invalid values will fall back on created - case insensitive." />
   <parameter name="sortDirection" description="DESC for descending (default), ASC for Ascending." />
   <sequence>
      <property name="uri.var.listId" expression="$func:listId" />
      <property name="uri.var.listName" expression="$func:listName" />
      <property name="uri.var.fromName" expression="$func:fromName" />
      <property name="uri.var.fromEmail" expression="$func:fromEmail" />
      <property name="uri.var.fromSubject" expression="$func:fromSubject" />
      <property name="uri.var.createdBefore" expression="$func:createdBefore" />
      <property name="uri.var.createdAfter" expression="$func:createdAfter" />
      <property name="uri.var.exact" expression="$func:exact" />
      <property name="uri.var.start" expression="$func:start" />
      <property name="uri.var.limit" expression="$func:limit" />
      <property name="uri.var.sortField" expression="$func:sortField" />
      <property name="uri.var.sortDirection" expression="$func:sortDirection" />
      <payloadFactory media-type="json">
         <format>
            {
               "apikey": "$1"
            }
         </format>
         <args>
            <arg expression="get-property('uri.var.apiKey')" />
         </args>
      </payloadFactory>
      <script language="js">
            <![CDATA[
                var jsonPayload = mc.getPayloadJSON();                
                var createdAfter = mc.getProperty('uri.var.createdAfter');
                var createdBefore = mc.getProperty('uri.var.createdBefore');
                var exact = mc.getProperty('uri.var.exact');
                var fromEmail = mc.getProperty('uri.var.fromEmail');
                var fromName = mc.getProperty('uri.var.fromName');
                var fromSubject = mc.getProperty('uri.var.fromSubject');
                var listId = mc.getProperty('uri.var.listId');
                var listName = mc.getProperty('uri.var.listName');
                var limit = mc.getProperty('uri.var.limit');
                var sortDirection = mc.getProperty('uri.var.sortDirection');
                var sortField = mc.getProperty('uri.var.sortField');
                var start = mc.getProperty('uri.var.start');				
                var filters = new Object();
                if (createdAfter != null && createdAfter != ""){
                    filters["created_after"] = createdAfter;
                }                
                if (createdBefore != null && createdBefore != ""){
                    filters["created_before"] = createdBefore;
                }                
                if (exact != null && exact != ""){
                    filters["exact"] = exact;
                }                
                if (fromEmail != null && fromEmail != ""){
                    filters["from_email"] = fromEmail;
                }                
                if (fromName != null && fromName != ""){
                    filters["from_name"] = fromName;
                }                
                if (fromSubject != null && fromSubject != ""){
                    filters["from_subject"] = fromSubject;
                }                
                if (listId != null && listId != ""){
                    filters["list_id"] = listId;
                }                
                if (listName != null && listName != ""){
                    filters["list_name"] = listName;
                }               
                jsonPayload["filters"] = filters;
                
                if (limit != null && limit != ""){
                    jsonPayload["limit"] = limit;
                }                
                if (sortDirection != null && sortDirection != ""){
                    jsonPayload["sort_dir"] = sortDirection;
                }                
                if (sortField != null && sortField != ""){
                    jsonPayload["sort_field"] = sortField;
                }                
                if (start != null && start != ""){
                    jsonPayload["start"] = start;
                }                
                mc.setPayloadJSON(jsonPayload);
            ]]>
      </script>
      <!--MailChimp API expects Content-Length Header -->
      <property name="DISABLE_CHUNKING" value="true" scope="axis2" />
      <call>
         <endpoint>
            <http method="post" uri-template="{uri.var.apiUrl}/lists/list.{uri.var.format}" />
         </endpoint>
      </call>
      <!-- Remove custom Headers from the API Response -->
      <header name="X-N" action="remove" scope="transport" />
      <header name="X-MailChimp-API-Error-Code" action="remove" scope="transport" />
   </sequence>
</template>